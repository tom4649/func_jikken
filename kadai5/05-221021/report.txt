課題05
富張聡祥　05221021

問1
動作例
Duneに頼らずにビルドの例を実行した
tomy@tomy-VirtualBox:~/func_jikken/kadai5/Week05/example$ ocamlyacc parser.mly
tomy@tomy-VirtualBox:~/func_jikken/kadai5/Week05/example$ ocamllex lexer.mll 
30 states, 1692 transitions, table size 6948 bytes
tomy@tomy-VirtualBox:~/func_jikken/kadai5/Week05/example$ ocamlc -c syntax.ml
tomy@tomy-VirtualBox:~/func_jikken/kadai5/Week05/example$ ocamlc -c parser.mli
tomy@tomy-VirtualBox:~/func_jikken/kadai5/Week05/example$ ocamlc -c lexer.ml
tomy@tomy-VirtualBox:~/func_jikken/kadai5/Week05/example$ ocamlc -c main.ml
tomy@tomy-VirtualBox:~/func_jikken/kadai5/Week05/example$ ocamlc -o example syntax.cmo parser.cmo lexer.cmo main.cmo
tomy@tomy-VirtualBox:~/func_jikken/kadai5/Week05/example$ ./example
if x < 0 then 4 else 5;;
EIf (ELt (x,0),4,5)

考察
Duneに頼らずにビルドの例を実行した。
ocamlyacc -v parser.mlyを実行し、出力ファイルparser.outputを読んだ。
factor_exprを全てatomic_exprに書き換えてatomic_exprを消去することでfactor_exprをatomic_exprに潰した。
その上で-vオプションを付けてコンパイルし、.outputファイルを見ると状態遷移表が変わることを確認できた。
grammer rulesの数とnonterminalsの数が一つずつ少なくなっていた。


＊問2~4のディレクトリは全て同一です。名前だけ変更しています。
問2
動作例
tomy@tomy-VirtualBox:~/func_jikken/kadai5/05-221021/toi2$ dune exec ./main.exe 
# 5*3;;                             
- = 15
# 3-5;;
- = -2
# 4/2;;                             
- = 2
# 5/2;;
- = 2
# 1/0;;(*0で割るとエラー発生*)                             
Fatal error: exception Division_by_zero

(*スライドの動作例*)                        
# (1+2)/3-4;;
- = -3
# 4*3<2-1;;
- = false

(*演算子の結合性、評価順序が正しいことの確認(関数print_commandを使用))
(*算術演算子は左結合*)
# 1+1+1;;                           
- = 3
EAdd (EAdd (1,1),1)
# 2*2*2;;
- = 8
EMul (EMul (2,2),2)
# 2*3+1-4;;
- = 3
ESub (EAdd (EMul (2,3),1),4)
# 4+3*2-4;;
- = 6
ESub (EAdd (4,EMul (3,2)),4)
# 4+6/3-1;;
- = 5
ESub (EAdd (4,EDiv (6,3)),1)


考察
reidaiフォルダのeval.mlを拡張して整数の減算、乗算、除算を扱えるようにした。
加算の実装の演算を変えただけである。
除算に関して、割る数が0の場合にEvalErrorが発生するように定義した。
このとき動作例にあるように演算子の結合性や優先順序が正しいことを確認できた。

問3
動作例
tomy@tomy-VirtualBox:~/func_jikken/kadai5/05-221021/kadai3$ dune exec ./main.exe 
tomy@tomy-VirtualBox:~/func_jikken/kadai5/05-221021/kadai4$ dune exec ./main.exe 
# let x = 3;;                       
val x = 3
# x;;(*letが環境を変更することを確認)
- = 3
# let x = 5;;
val x = 5
# x;;(*letが環境を上書きすることを確認)
- = 5
# let x = 2 in x + 1;;(*let... in ... が正しく動作することの確認*)
- = 3
# let x = 3 in let y = 3 in x+y;;(*let... in... が複数定義されていても動作することの確認*)
- = 6
# x;;(*let ... in ...の環境はその中だけであることの確認*)     
- = 5
# let x =1;;

(*スライドの動作例*)                        
val x = 1
# let y = 2 + x in let x = 3 in x + y;;
考察
問2のeval.mlを拡張して変数定義を扱えるようにした。
変更した箇所は関数eval_exprのELetとeval_commandの箇所である。
関数eval_exprのELetは関数extendとeval_exprによって、変数とexprの評価値の組を一時的に加えた新しい環境でin内の値を評価するようにした。
関数eval_commandはcommandがCDeclの場合に、変数ともとの環境でのexprの評価値の組を環境に加え、値を表示するように定義した。

問4
動作例
(*スライドの動作例*)
# let tt = true in if tt || false then 1*2 else 3-4;;
- = 2
# let tt = true in if tt && false then 1*2 else 3-4;;
- = -1
# true & false;;(*&に対応*)
- = false
# true or false;;(*orに対応*)
- = true
# not true;;(*notに対応*)
- = false

(*演算子の結合性、評価順序が正しいことの確認(関数print_commandを使用)*)
(*ブール値演算は右結合*)
# true && true && true;;
- = true
EAnd (true,EAnd (true,true))
# true && false || false;;
- = false
EAnd (true,EOr (false,false))
# not true || false;;(*notの優先度が最も高い*)
- = false
EOr (ENot (true),false)
# 1+1=2 && 1-1=0;;(*本来のocamlと同じ挙動*)
- = true
EAnd (EEq (EAdd (1,1),2),EEq (ESub (1,1),0))
# not 1+1=2 && 1-1=0;;(*本来のocamlと同じエラー*)
Fatal error: exception Dune__exe__Eval.EvalErr

考察
ブール値の演算として論理和、論理積、否定を扱えるように実装した。
lexer.mllを書き換えて論理和と論理積は通常の&&,||に加えて&,orも論理和、論理積を表すように実装した。
それに伴い、syntax.mlのtype exprに EAnd　of expr * expr, EOr　of expr * expr, ENot of exprを加えた。
さらにeval.mlにもこれらの型の自然な評価を加えた。
工夫したのはparser.mlyの定義で、適切に階層に分けることで文法の曖昧性を排除し、演算子の結合性が正しくなるように実装できた。
その結果build時やocamlyaccの-vオプション実行時の.outputファイルにおいてConflictが発生しないことを確認できた。
また動作例にあるように演算子の優先順序と結合性が正しいことも確認できた。

参考
<https://v2.ocaml.org/manual/expr.html#start-section> 演算子の優先順序と結合性について参照した。

＊発展1と2のディレクトリは全て同一です。名前だけ変更しています。


発展1
動作例
# aaa;;                             
Eval Error
# 1 end 2;;
Error
# 1>2;;
Unknown Token: >
# 1+1 true;;                        
Error(maybe Parsing Error)
# (入力待ち)

考察
main.ml内の関数read_eval_print内でエラー催促を行うことにより、例外発生時に適切なメッセージを表示し、
インタプリタプロンプトが終了するのではなくインタプリタプロンプトに戻るように実装した。
自分で定義したeval.mlのエラーとlexer.mll内で定義した関数failwithによるエラーはエラーの原因がわかったが、
menhirのエラーはマニュアルを見ても良く理解できなかったため、その他のエラーとしてまとめて処理した。
menhirのエラーについての理解は今後の課題としたい。

参考
<http://cambium.inria.fr/~fpottier/menhir/manual.pdf> menhirのエラーについて参照したがあまり理解できなかった。

発展2
動作例
(*スライドの動作例*)
# let x = 10                        
  let y = x  + 1
  let z = x*y;;
val x = 10
val y = 11
val z = 110
# x;;
- = 10
# y;;
- = 11
# z;;
- = 110

考察
let宣言の列を一度に入力できるようにするために変更した点は以下の通り。
syntax.ml :   type commandにletが2つ以上続く式を表すCDecl1 of name*expr*commandを追加
parser.mly : 新たな状態declを加え、let式が２つ以上続く場合を分けた。let式が２つ以上続く場合には右結合にすることで左から順に評価した。
eval.ml : 関数eval_commandの出力値を「出力する変数名と値の組のリスト」と「変更後の環境」の組に変更した。
そのために補助関数eval_cdecl1を作成した。式の評価にはそれまでのlet式で拡張された環境を用いた。
main.ml : eval.mlの変更に合わせて関数read_eval_printを書き換え、そのために補助関数print_ansを定義した。
動作例にあるようにlet宣言の列を一度に入力できるようになった。また文法の曖昧性は排除できた。

発展3

動作例
(スライドの動作例)
# let x = 10;;                      
val x = 10
# let x = 50 and y = x * 2 ;;
val x = 50
val y = 20
# let x =10;;
val x = 10
# let x = 50 and y = x * 2 in x + y;;
- = 70

(andを複数使用できることの確認)
# let x = 0 and y = 10 and z = 6 in x + y - z;;
- = 4

考察
let andを使って複数の変数を同時に定義するために変更した点は以下の通り。
lexer.mll: andを認識す規則を付け加えた。
syntax.ml:type commandにCLetAnd of name*expr*commandとCLet of name*expr*expr
を付け加えた。これらはそれぞれandで結ばれた式とandで結ばれた式がinで終わる場合の式を表す状態である。
parser.mly : 新たな状態letandを加え、let　andで変数が同時に定義される続く場合を分けた。
let式が２つ以上続く場合には右結合にすることで左から順に評価した。
eval.ml:発展2と同様に関数eval_commandの出力値を「出力する変数名と値の組のリスト」と「変更後の環境」の組とした。
そのために補助関数eval_cdletandを作成した。式の評価にはlet式で拡張された環境ではなく元の環境を用いた。
正しく動作することを確認できた。また文法の曖昧性は排除できた。
